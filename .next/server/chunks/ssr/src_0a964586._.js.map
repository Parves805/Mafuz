{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/analytics/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Bar, BarChart, CartesianGrid, Line, LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip } from \"recharts\";\nimport type { Order } from '@/lib/types';\nimport { format, subMonths, subDays } from 'date-fns';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    const value = payload[0].value;\n    const key = payload[0].dataKey;\n    \n    let displayValue = value.toLocaleString('en-IN');\n    if (key === 'sales') {\n        displayValue = `৳${value.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n    }\n\n    return (\n      <div className=\"bg-background border rounded-lg p-2 shadow-sm text-sm\">\n        <p className=\"font-bold mb-1\">{label}</p>\n        <p className=\"text-primary\">{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${displayValue}`}</p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AnalyticsPage() {\n    const [salesData, setSalesData] = useState<any[]>([]);\n    const [dailyOrdersData, setDailyOrdersData] = useState<any[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        try {\n            const savedOrders = localStorage.getItem('bazaargoUserOrders');\n            let orders: Order[] = [];\n            if (savedOrders) {\n                const parsed = JSON.parse(savedOrders);\n                if (Array.isArray(parsed)) {\n                    orders = parsed;\n                }\n            }\n            \n            const now = new Date();\n            \n            // --- Process Sales Data for Chart (last 6 months) ---\n            const monthlySalesArray = Array.from({ length: 6 }, (_, i) => {\n                const d = subMonths(now, 5 - i);\n                return { name: format(d, 'MMM'), sales: 0 };\n            });\n\n            orders.forEach(order => {\n                 if (order.status !== 'Cancelled') {\n                    const orderDate = new Date(order.date);\n                    if (orderDate >= subMonths(now, 6)) {\n                        const monthName = format(orderDate, 'MMM');\n                        const monthData = monthlySalesArray.find(m => m.name === monthName);\n                        if (monthData) {\n                            monthData.sales += order.total;\n                        }\n                    }\n                }\n            });\n            setSalesData(monthlySalesArray);\n            \n             // --- Process Daily Orders for Chart (last 7 days) ---\n            const dailyOrdersArray = Array.from({ length: 7 }, (_, i) => {\n                const d = subDays(now, 6 - i);\n                return { name: format(d, 'EEE'), orders: 0 };\n            });\n\n            orders.forEach(order => {\n                const orderDate = new Date(order.date);\n                if (orderDate >= subDays(now, 7)) {\n                    const dayName = format(orderDate, 'EEE');\n                    const dayData = dailyOrdersArray.find(d => d.name === dayName);\n                    if (dayData) {\n                        dayData.orders++;\n                    }\n                }\n            });\n            setDailyOrdersData(dailyOrdersArray);\n\n        } catch (error) {\n            console.error(\"Failed to load analytics data from localStorage\", error);\n        } finally {\n            setIsLoading(false);\n        }\n    }, []);\n\n    return (\n        <div className=\"space-y-6\">\n            <h1 className=\"text-3xl font-bold font-headline\">Analytics</h1>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Sales Overview</CardTitle>\n                        <CardDescription>Monthly sales performance for the last 6 months.</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        {isLoading ? <Skeleton className=\"h-[300px] w-full\" /> : (\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                            <BarChart data={salesData}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"name\" stroke=\"#888888\" fontSize={12} tickLine={false} axisLine={false} />\n                                <YAxis stroke=\"#888888\" fontSize={12} tickLine={false} axisLine={false} tickFormatter={(value) => `৳${Number(value) / 1000}k`} />\n                                <Tooltip content={<CustomTooltip />} cursor={{ fill: 'hsl(var(--muted))' }} />\n                                <Bar dataKey=\"sales\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n                            </BarChart>\n                        </ResponsiveContainer>\n                        )}\n                    </CardContent>\n                </Card>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Daily Orders</CardTitle>\n                        <CardDescription>Order volume for the last 7 days.</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        {isLoading ? <Skeleton className=\"h-[300px] w-full\" /> : (\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                            <LineChart data={dailyOrdersData}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"name\" stroke=\"#888888\" fontSize={12} tickLine={false} axisLine={false} />\n                                <YAxis allowDecimals={false} stroke=\"#888888\" fontSize={12} tickLine={false} axisLine={false} />\n                                <Tooltip content={<CustomTooltip />} cursor={{ stroke: 'hsl(var(--primary))', strokeWidth: 2 }} />\n                                <Line type=\"monotone\" dataKey=\"orders\" stroke=\"hsl(var(--primary))\" strokeWidth={2} dot={{ r: 4, fill: 'hsl(var(--primary))' }} />\n                            </LineChart>\n                        </ResponsiveContainer>\n                        )}\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}