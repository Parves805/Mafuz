{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/communications/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, Send, MessageSquare, ArrowLeft } from 'lucide-react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { cn } from '@/lib/utils';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { format, formatDistanceToNow, parseISO, isToday, isYesterday } from 'date-fns';\nimport { Badge } from '@/components/ui/badge';\n\nconst ALL_CHATS_KEY = 'bazaargoAllChatThreads';\nconst ADMIN_LAST_SEEN_KEY = 'bazaargoAdminLastSeenCounts';\n\ninterface Message {\n    sender: 'user' | 'admin';\n    text: string;\n    timestamp: string;\n}\n\ninterface UserThread {\n    threadId: string;\n    userName: string;\n    messages: Message[];\n    lastMessageTimestamp: string;\n    unreadCount: number;\n}\n\nconst formatTimestamp = (timestamp: string) => {\n    try {\n        const date = parseISO(timestamp);\n        if (isToday(date)) {\n            return format(date, 'p'); // e.g., 2:30 PM\n        }\n        if (isYesterday(date)) {\n            return 'Yesterday';\n        }\n        return format(date, 'MMM d'); // e.g., 'Nov 5'\n    } catch (e) {\n        return \"Invalid date\";\n    }\n}\n\nexport default function CommunicationsPage() {\n    const { toast } = useToast();\n    const [threads, setThreads] = useState<UserThread[]>([]);\n    const [selectedThread, setSelectedThread] = useState<UserThread | null>(null);\n    const [replyMessage, setReplyMessage] = useState('');\n    const [isReplying, setIsReplying] = useState(false);\n    const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const loadThreads = () => {\n            try {\n                const allThreadsJson = localStorage.getItem(ALL_CHATS_KEY);\n                const allThreads = allThreadsJson ? JSON.parse(allThreadsJson) : {};\n\n                const lastSeenCountsJson = localStorage.getItem(ADMIN_LAST_SEEN_KEY);\n                const lastSeenCounts = lastSeenCountsJson ? JSON.parse(lastSeenCountsJson) : {};\n                \n                const loadedThreads: UserThread[] = Object.values(allThreads).map((thread: any) => {\n                    const totalMessages = thread.messages?.length || 0;\n                    if (totalMessages === 0) return null; // Don't show empty threads\n                    const seenCount = lastSeenCounts[thread.threadId] || 0;\n                    return {\n                        ...thread,\n                        lastMessageTimestamp: thread.messages[totalMessages - 1]?.timestamp || new Date(0).toISOString(),\n                        unreadCount: totalMessages - seenCount,\n                    };\n                }).filter((t): t is UserThread => t !== null);\n\n                loadedThreads.sort((a, b) => {\n                    try {\n                        return parseISO(b.lastMessageTimestamp).getTime() - parseISO(a.lastMessageTimestamp).getTime()\n                    } catch {\n                        return 0;\n                    }\n                });\n                \n                setThreads(loadedThreads);\n\n                setSelectedThread(currentThread => {\n                    if (!currentThread) return null;\n                    const updatedSelectedThread = loadedThreads.find(t => t.threadId === currentThread.threadId);\n                    return updatedSelectedThread || null;\n                });\n\n            } catch (error) {\n                console.error(\"Failed to load threads\", error);\n            }\n        }\n        \n        loadThreads();\n        const interval = setInterval(loadThreads, 3000);\n        return () => clearInterval(interval);\n    }, []);\n\n    useEffect(() => {\n        const viewport = scrollAreaRef.current?.querySelector('div[data-radix-scroll-area-viewport]');\n        if (viewport) {\n            setTimeout(() => viewport.scrollTo({ top: viewport.scrollHeight, behavior: 'smooth' }), 100);\n        }\n    }, [selectedThread, selectedThread?.messages.length]);\n\n    const handleSelectThread = (thread: UserThread) => {\n        setSelectedThread(thread);\n        try {\n            const lastSeenCountsJson = localStorage.getItem(ADMIN_LAST_SEEN_KEY);\n            const lastSeenCounts = lastSeenCountsJson ? JSON.parse(lastSeenCountsJson) : {};\n            lastSeenCounts[thread.threadId] = thread.messages.length;\n            localStorage.setItem(ADMIN_LAST_SEEN_KEY, JSON.stringify(lastSeenCounts));\n\n            // Optimistic update for immediate UI feedback\n            setThreads(prev => prev.map(t => t.threadId === thread.threadId ? { ...t, unreadCount: 0 } : t));\n        } catch (e) {\n            console.error(\"Failed to update seen count\", e);\n        }\n    };\n\n    const handleReply = () => {\n        if (!replyMessage.trim() || !selectedThread) return;\n        setIsReplying(true);\n\n        const newReply: Message = { sender: 'admin', text: replyMessage, timestamp: new Date().toISOString() };\n\n        try {\n            const allThreadsJson = localStorage.getItem(ALL_CHATS_KEY);\n            const allThreads = allThreadsJson ? JSON.parse(allThreadsJson) : {};\n            const threadToUpdate = allThreads[selectedThread.threadId];\n\n            if (threadToUpdate) {\n                threadToUpdate.messages.push(newReply);\n                threadToUpdate.lastMessageTimestamp = newReply.timestamp;\n                localStorage.setItem(ALL_CHATS_KEY, JSON.stringify(allThreads));\n                \n                setReplyMessage('');\n            }\n        } catch(e) {\n            console.error(\"Failed to send reply\", e);\n            toast({ variant: 'destructive', title: 'Error', description: 'Failed to send reply.' });\n        } finally {\n            setIsReplying(false);\n        }\n    }\n\n    return (\n        <div className=\"space-y-4 md:space-y-6 h-full flex flex-col\">\n            <h1 className=\"text-2xl md:text-3xl font-bold font-headline flex-shrink-0\">Communications</h1>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6 flex-grow min-h-0\">\n                \n                {/* Thread List */}\n                <Card className={cn(\"md:col-span-1 lg:col-span-1 flex flex-col\", selectedThread && \"hidden md:flex\")}>\n                    <CardHeader className=\"border-b\">\n                        <CardTitle>Inbox</CardTitle>\n                        <CardDescription>{threads.length} active conversation(s)</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"p-0 flex-grow\">\n                        <ScrollArea className=\"h-full\">\n                            <div className=\"p-2 space-y-1\">\n                                {threads.length > 0 ? threads.map((thread) => (\n                                    <button \n                                        key={thread.threadId} \n                                        onClick={() => handleSelectThread(thread)}\n                                        className={cn(\n                                            \"w-full text-left p-3 rounded-lg flex items-center gap-3 transition-colors\",\n                                            selectedThread?.threadId === thread.threadId ? \"bg-muted\" : \"hover:bg-muted/50\"\n                                        )}\n                                    >\n                                        <Avatar className=\"h-10 w-10\">\n                                            <AvatarFallback>{thread.userName.charAt(0)}</AvatarFallback>\n                                        </Avatar>\n                                        <div className=\"flex-grow overflow-hidden\">\n                                            <p className=\"font-semibold truncate\">{thread.userName}</p>\n                                            <p className=\"text-sm text-muted-foreground truncate\">{thread.messages[thread.messages.length - 1].text}</p>\n                                        </div>\n                                        <div className=\"flex flex-col items-end text-xs text-muted-foreground gap-1.5 flex-shrink-0\">\n                                            <span>{formatTimestamp(thread.lastMessageTimestamp)}</span>\n                                            {thread.unreadCount > 0 && <Badge className=\"w-5 h-5 flex items-center justify-center p-0\">{thread.unreadCount}</Badge>}\n                                        </div>\n                                    </button>\n                                )) : (\n                                    <div className=\"text-center p-8 text-muted-foreground\">No messages yet.</div>\n                                )}\n                            </div>\n                        </ScrollArea>\n                    </CardContent>\n                </Card>\n\n                {/* Message View */}\n                <Card className={cn(\"md:col-span-2 lg:col-span-3 flex flex-col\", !selectedThread && \"hidden md:flex\")}>\n                    {selectedThread ? (\n                        <>\n                            <CardHeader className=\"flex flex-row items-center gap-3 border-b\">\n                                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" onClick={() => setSelectedThread(null)}>\n                                    <ArrowLeft />\n                                </Button>\n                                <Avatar><AvatarFallback>{selectedThread.userName.charAt(0)}</AvatarFallback></Avatar>\n                                <div>\n                                    <CardTitle>{selectedThread.userName}</CardTitle>\n                                    <CardDescription>Last active: {formatDistanceToNow(parseISO(selectedThread.lastMessageTimestamp), { addSuffix: true })}</CardDescription>\n                                </div>\n                            </CardHeader>\n                             <CardContent className=\"flex-grow p-0 overflow-hidden\">\n                                <ScrollArea className=\"h-full\" ref={scrollAreaRef}>\n                                    <div className=\"p-4 space-y-4\">\n                                        {selectedThread.messages.map((msg, index) => (\n                                            <div key={index} className={cn(\"flex items-end gap-2\", msg.sender === 'admin' ? \"justify-end\" : \"justify-start\")}>\n                                                 {msg.sender === 'user' && <Avatar className=\"h-8 w-8\"><AvatarFallback>{selectedThread.userName.charAt(0)}</AvatarFallback></Avatar>}\n                                                <div className={cn(\"max-w-[70%] rounded-lg p-3 text-sm\", msg.sender === 'admin' ? 'bg-primary text-primary-foreground' : 'bg-muted')}>\n                                                    <p>{msg.text}</p>\n                                                    <p className={cn(\"text-xs mt-1 text-right\", msg.sender === 'admin' ? 'text-primary-foreground/70' : 'text-muted-foreground')}>\n                                                        {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                                                    </p>\n                                                </div>\n                                                 {msg.sender === 'admin' && <Avatar className=\"h-8 w-8\"><AvatarFallback>A</AvatarFallback></Avatar>}\n                                            </div>\n                                        ))}\n                                    </div>\n                                </ScrollArea>\n                            </CardContent>\n                            <div className=\"p-4 border-t\">\n                                <div className=\"flex gap-2\">\n                                    <Textarea \n                                        placeholder=\"Type your reply...\"\n                                        value={replyMessage}\n                                        onChange={(e) => setReplyMessage(e.target.value)}\n                                        onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleReply(); }}}\n                                        className=\"min-h-10 h-10 resize-none\"\n                                    />\n                                    <Button onClick={handleReply} disabled={isReplying || !replyMessage.trim()} size=\"icon\" className=\"h-10 w-10 flex-shrink-0\">\n                                        {isReplying ? <Loader2 className=\"animate-spin\" /> : <Send />}\n                                        <span className=\"sr-only\">Send</span>\n                                    </Button>\n                                </div>\n                            </div>\n                        </>\n                    ) : (\n                        <div className=\"flex flex-col items-center justify-center h-full text-muted-foreground gap-4\">\n                            <MessageSquare className=\"h-16 w-16\" />\n                            <p className=\"text-lg\">Select a conversation to start chatting.</p>\n                        </div>\n                    )}\n                </Card>\n            </div>\n        </div>\n    );\n}\n\n    "],"names":[],"mappings":"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","debugId":null}}]
}